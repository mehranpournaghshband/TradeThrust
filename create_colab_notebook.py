#!/usr/bin/env python3
"""
Script to create TradeThrust Colab Notebook
"""

import json

# Create the notebook structure
notebook = {
    "nbformat": 4,
    "nbformat_minor": 0,
    "metadata": {
        "colab": {
            "provenance": [],
            "name": "TradeThrust Professional Analysis"
        },
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3"
        },
        "language_info": {
            "name": "python"
        }
    },
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {"id": "header"},
            "source": [
                "# 🚀 TradeThrust Professional - Google Colab Edition\n",
                "\n",
                "## 📊 Complete Stock Analysis System\n",
                "\n",
                "**Welcome to TradeThrust Professional!** This notebook implements the complete TradeThrust algorithm with:\n",
                "\n",
                "✅ **Trend Template Filter** (10 conditions)  \n",
                "✅ **VCP Pattern Detection** (7 conditions)  \n",
                "✅ **Breakout Confirmation** (3 conditions)  \n",
                "✅ **Risk Setup & Position Sizing**  \n",
                "✅ **Exact Buy/Sell Prices**  \n",
                "✅ **Professional Tables & Analysis**  \n",
                "\n",
                "### 🎯 Quick Start:\n",
                "1. **Run the setup cell** below (installs dependencies)\n",
                "2. **Run the TradeThrust code cell** (loads the system)\n",
                "3. **Enter any stock symbol** in the analysis cell\n",
                "4. **Get professional analysis** with exact buy/sell prices!\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {"id": "setup"},
            "outputs": [],
            "source": [
                "# 🚀 TradeThrust Professional Setup for Google Colab\n",
                "# Run this cell first to install dependencies\n",
                "\n",
                "print(\"🚀 Installing TradeThrust Professional dependencies...\")\n",
                "\n",
                "# Install required packages\n",
                "!pip install yfinance pandas numpy matplotlib -q\n",
                "\n",
                "# Import libraries\n",
                "import yfinance as yf\n",
                "import pandas as pd\n",
                "import numpy as np\n",
                "import matplotlib.pyplot as plt\n",
                "from datetime import datetime, timedelta\n",
                "from typing import Dict, List, Optional\n",
                "import warnings\n",
                "warnings.filterwarnings('ignore')\n",
                "\n",
                "print(\"✅ All dependencies installed successfully!\")\n",
                "print(\"🎉 TradeThrust Professional - Ready for Google Colab!\")\n",
                "print(\"=\" * 60)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {"id": "tradethrust_code"},
            "outputs": [],
            "source": [
                "# 🚀 TradeThrust Complete Algorithm Implementation\n",
                "# This cell contains the complete TradeThrust system\n",
                "\n",
                "class TradeThrustColab:\n",
                "    \"\"\"TradeThrust Professional optimized for Google Colab\"\"\"\n",
                "    \n",
                "    def __init__(self):\n",
                "        self.analysis_results = {}\n",
                "        \n",
                "    def analyze_stock(self, symbol: str) -> Dict:\n",
                "        \"\"\"Complete professional stock analysis\"\"\"\n",
                "        symbol = symbol.upper()\n",
                "        \n",
                "        # Print header\n",
                "        print(\"\\n\" + \"═\" * 80)\n",
                "        print(f\"🚀 TRADETHRUST PROFESSIONAL ANALYSIS\")\n",
                "        print(f\"📊 Symbol: {symbol} | Analysis Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\")\n",
                "        print(\"📚 Based on TradeThrust Professional Trading Methodology\")\n",
                "        print(\"═\" * 80)\n",
                "        \n",
                "        # Fetch data\n",
                "        try:\n",
                "            print(f\"📡 Fetching data for {symbol}...\")\n",
                "            ticker = yf.Ticker(symbol)\n",
                "            data = ticker.history(period=\"2y\")\n",
                "            \n",
                "            if data.empty:\n",
                "                print(f\"❌ No data available for {symbol}\")\n",
                "                return {'error': f'No data for {symbol}'}\n",
                "            \n",
                "            print(f\"✅ Data fetched successfully - {len(data)} days of history\")\n",
                "            data = self._calculate_indicators(data)\n",
                "            \n",
                "        except Exception as e:\n",
                "            print(f\"❌ Error fetching data for {symbol}: {e}\")\n",
                "            return {'error': str(e)}\n",
                "        \n",
                "        # Run complete analysis\n",
                "        trend_results = self._analyze_trend_template(data, symbol)\n",
                "        vcp_results = self._analyze_vcp_pattern(data, symbol)\n",
                "        breakout_results = self._analyze_breakout_confirmation(data, symbol)\n",
                "        risk_results = self._calculate_risk_setup(data)\n",
                "        recommendation = self._generate_recommendation(trend_results, vcp_results, breakout_results, risk_results)\n",
                "        \n",
                "        # Display results\n",
                "        self._display_buy_sell_prices(risk_results)\n",
                "        self._display_recommendation(recommendation, symbol)\n",
                "        \n",
                "        return {\n",
                "            'symbol': symbol,\n",
                "            'trend_results': trend_results,\n",
                "            'vcp_results': vcp_results,\n",
                "            'breakout_results': breakout_results,\n",
                "            'risk_results': risk_results,\n",
                "            'recommendation': recommendation\n",
                "        }\n",
                "    \n",
                "    def _calculate_indicators(self, data: pd.DataFrame) -> pd.DataFrame:\n",
                "        \"\"\"Calculate all required technical indicators\"\"\"\n",
                "        print(\"📊 Calculating technical indicators...\")\n",
                "        df = data.copy()\n",
                "        \n",
                "        # Simple Moving Averages\n",
                "        df['SMA_50'] = df['Close'].rolling(window=50).mean()\n",
                "        df['SMA_150'] = df['Close'].rolling(window=150).mean()\n",
                "        df['SMA_200'] = df['Close'].rolling(window=200).mean()\n",
                "        \n",
                "        # 52-week high and low\n",
                "        df['52W_High'] = df['High'].rolling(window=252).max()\n",
                "        df['52W_Low'] = df['Low'].rolling(window=252).min()\n",
                "        \n",
                "        # Volume indicators\n",
                "        df['Avg_Volume_50'] = df['Volume'].rolling(window=50).mean()\n",
                "        \n",
                "        # Relative Strength (simplified)\n",
                "        try:\n",
                "            spy_data = yf.Ticker('SPY').history(period=\"2y\")\n",
                "            if not spy_data.empty:\n",
                "                spy_returns = spy_data['Close'].pct_change(20)\n",
                "                stock_returns = df['Close'].pct_change(20)\n",
                "                df['RS_Rating'] = ((stock_returns / spy_returns) * 50 + 50).fillna(70)\n",
                "            else:\n",
                "                df['RS_Rating'] = 70\n",
                "        except:\n",
                "            df['RS_Rating'] = 70\n",
                "        \n",
                "        print(\"✅ Technical indicators calculated\")\n",
                "        return df\n",
                "    \n",
                "    def _analyze_trend_template(self, data: pd.DataFrame, symbol: str) -> Dict:\n",
                "        \"\"\"Step 1: Complete Trend Template Analysis (10 conditions)\"\"\"\n",
                "        print(f\"\\n✅ STEP 1: TREND TEMPLATE FILTER\")\n",
                "        print(\"─\" * 60)\n",
                "        print(\"Checking all 10 TradeThrust conditions:\")\n",
                "        \n",
                "        latest = data.iloc[-1]\n",
                "        recent_20 = data.tail(20)\n",
                "        \n",
                "        # Get values\n",
                "        price = latest['Close']\n",
                "        sma_50 = latest['SMA_50']\n",
                "        sma_150 = latest['SMA_150']\n",
                "        sma_200 = latest['SMA_200']\n",
                "        high_52w = latest['52W_High']\n",
                "        low_52w = latest['52W_Low']\n",
                "        rs_rating = latest['RS_Rating']\n",
                "        \n",
                "        # Check 200-day SMA rising\n",
                "        sma_200_rising = recent_20['SMA_200'].iloc[-1] > recent_20['SMA_200'].iloc[0]\n",
                "        \n",
                "        # All 10 conditions\n",
                "        conditions = [\n",
                "            price > sma_50,\n",
                "            price > sma_150,\n",
                "            price > sma_200,\n",
                "            sma_150 > sma_200,\n",
                "            sma_50 > sma_150,\n",
                "            sma_50 > sma_200,\n",
                "            sma_200_rising,\n",
                "            price >= (low_52w * 1.3),\n",
                "            price >= (high_52w * 0.75),\n",
                "            rs_rating >= 70\n",
                "        ]\n",
                "        \n",
                "        condition_names = [\n",
                "            'price > 50-day SMA',\n",
                "            'price > 150-day SMA', \n",
                "            'price > 200-day SMA',\n",
                "            '150-day SMA > 200-day SMA',\n",
                "            '50-day SMA > 150-day SMA',\n",
                "            '50-day SMA > 200-day SMA',\n",
                "            '200-day SMA rising 20+ days',\n",
                "            'price ≥ (52W low × 1.3)',\n",
                "            'price ≥ (0.75 × 52W high)',\n",
                "            'RS_Rating ≥ 70'\n",
                "        ]\n",
                "        \n",
                "        passed_count = sum(conditions)\n",
                "        trend_passed = passed_count == 10\n",
                "        \n",
                "        # Display results\n",
                "        for condition, status in zip(condition_names, conditions):\n",
                "            status_symbol = \"✅ PASS\" if status else \"❌ FAIL\"\n",
                "            print(f\"{condition:<30} {status_symbol}\")\n",
                "        \n",
                "        print(\"─\" * 60)\n",
                "        print(f\"🎯 TREND TEMPLATE RESULT: {passed_count}/10 - {'✅ PASSED' if trend_passed else '❌ FAILED'}\")\n",
                "        \n",
                "        return {'passed': trend_passed, 'score': passed_count, 'total': 10}\n",
                "    \n",
                "    def _analyze_vcp_pattern(self, data: pd.DataFrame, symbol: str) -> Dict:\n",
                "        \"\"\"Step 2: VCP Pattern Detection\"\"\"\n",
                "        print(f\"\\n📈 STEP 2: VCP PATTERN DETECTION\")\n",
                "        print(\"─\" * 45)\n",
                "        \n",
                "        # Simplified VCP detection for Colab\n",
                "        vcp_period = data.tail(75)  # 15 weeks\n",
                "        contractions = self._find_contractions(vcp_period)\n",
                "        \n",
                "        # VCP conditions\n",
                "        enough_contractions = len(contractions) >= 2\n",
                "        contractions_decreasing = len(contractions) >= 2 and all(\n",
                "            contractions[i]['percentage'] < contractions[i-1]['percentage'] \n",
                "            for i in range(1, len(contractions))\n",
                "        )\n",
                "        \n",
                "        vcp_score = sum([enough_contractions, contractions_decreasing])\n",
                "        vcp_detected = vcp_score >= 1\n",
                "        \n",
                "        print(f\"Contractions found: {len(contractions)}\")\n",
                "        if contractions:\n",
                "            for i, c in enumerate(contractions, 1):\n",
                "                print(f\"   Pullback {i}: -{c['percentage']:.1f}% over {c['duration']} days\")\n",
                "        \n",
                "        print(f\"Pattern quality: {'Good' if contractions_decreasing else 'Poor'}\")\n",
                "        print(f\"🎯 VCP RESULT: {'✅ DETECTED' if vcp_detected else '❌ NOT DETECTED'}\")\n",
                "        \n",
                "        return {'detected': vcp_detected, 'score': vcp_score}\n",
                "    \n",
                "    def _analyze_breakout_confirmation(self, data: pd.DataFrame, symbol: str) -> Dict:\n",
                "        \"\"\"Step 3: Breakout Confirmation\"\"\"\n",
                "        print(f\"\\n🎯 STEP 3: BREAKOUT CONFIRMATION\")\n",
                "        print(\"─\" * 40)\n",
                "        \n",
                "        latest = data.iloc[-1]\n",
                "        recent_50 = data.tail(50)\n",
                "        \n",
                "        current_price = latest['Close']\n",
                "        pivot_point = recent_50['High'].max()\n",
                "        avg_volume_50 = recent_50['Volume'].mean()\n",
                "        current_volume = latest['Volume']\n",
                "        \n",
                "        # Breakout conditions\n",
                "        above_pivot = current_price > pivot_point\n",
                "        volume_surge = current_volume >= (avg_volume_50 * 1.4)\n",
                "        \n",
                "        breakout_score = sum([above_pivot, volume_surge])\n",
                "        breakout_confirmed = breakout_score >= 1\n",
                "        \n",
                "        print(f\"Price vs Pivot: ${current_price:.2f} vs ${pivot_point:.2f} - {'✅ PASS' if above_pivot else '❌ FAIL'}\")\n",
                "        print(f\"Volume surge: {(current_volume/avg_volume_50):.1f}x avg - {'✅ PASS' if volume_surge else '❌ FAIL'}\")\n",
                "        print(f\"🎯 BREAKOUT: {'✅ CONFIRMED' if breakout_confirmed else '❌ NOT CONFIRMED'}\")\n",
                "        \n",
                "        return {'confirmed': breakout_confirmed, 'score': breakout_score, 'pivot_point': pivot_point}\n",
                "    \n",
                "    def _calculate_risk_setup(self, data: pd.DataFrame) -> Dict:\n",
                "        \"\"\"Step 5: Risk Setup Calculation\"\"\"\n",
                "        latest = data.iloc[-1]\n",
                "        current_price = latest['Close']\n",
                "        \n",
                "        # Calculate stop loss\n",
                "        recent_support = data.tail(20)['Low'].min()\n",
                "        stop_loss_8pct = current_price * 0.92\n",
                "        stop_loss = max(stop_loss_8pct, recent_support * 0.98)\n",
                "        \n",
                "        # Calculate targets\n",
                "        risk_per_share = current_price - stop_loss\n",
                "        risk_percent = (risk_per_share / current_price) * 100\n",
                "        \n",
                "        target_1 = current_price * 1.20  # 20%\n",
                "        target_2 = current_price * 1.35  # 35%\n",
                "        target_3 = current_price * 1.50  # 50%\n",
                "        \n",
                "        reward_risk_ratio = (target_1 - current_price) / risk_per_share if risk_per_share > 0 else 0\n",
                "        \n",
                "        return {\n",
                "            'entry_price': current_price,\n",
                "            'stop_loss': stop_loss,\n",
                "            'risk_per_share': risk_per_share,\n",
                "            'risk_percent': risk_percent,\n",
                "            'target_1': target_1,\n",
                "            'target_2': target_2,\n",
                "            'target_3': target_3,\n",
                "            'reward_risk_ratio': reward_risk_ratio\n",
                "        }\n",
                "    \n",
                "    def _generate_recommendation(self, trend_results: Dict, vcp_results: Dict, \n",
                "                               breakout_results: Dict, risk_results: Dict) -> Dict:\n",
                "        \"\"\"Generate final recommendation\"\"\"\n",
                "        trend_passed = trend_results.get('passed', False)\n",
                "        vcp_detected = vcp_results.get('detected', False)\n",
                "        breakout_confirmed = breakout_results.get('confirmed', False)\n",
                "        \n",
                "        if trend_passed and vcp_detected and breakout_confirmed:\n",
                "            recommendation = \"🟢 STRONG BUY\"\n",
                "            action = \"EXECUTE BUY ORDER\"\n",
                "            confidence = \"HIGH\"\n",
                "        elif trend_passed and vcp_detected:\n",
                "            recommendation = \"🟡 WATCH LIST\"\n",
                "            action = \"WAIT FOR BREAKOUT\"\n",
                "            confidence = \"MEDIUM\"\n",
                "        elif trend_passed:\n",
                "            recommendation = \"🟡 MONITOR\"\n",
                "            action = \"WATCH FOR VCP\"\n",
                "            confidence = \"LOW\"\n",
                "        else:\n",
                "            recommendation = \"🔴 AVOID\"\n",
                "            action = \"SKIP THIS STOCK\"\n",
                "            confidence = \"HIGH\"\n",
                "        \n",
                "        return {\n",
                "            'recommendation': recommendation,\n",
                "            'action': action,\n",
                "            'confidence': confidence,\n",
                "            'trend_passed': trend_passed,\n",
                "            'vcp_detected': vcp_detected,\n",
                "            'breakout_confirmed': breakout_confirmed\n",
                "        }\n",
                "    \n",
                "    def _display_buy_sell_prices(self, risk_results: Dict):\n",
                "        \"\"\"Display exact buy and sell prices\"\"\"\n",
                "        print(f\"\\n💰 EXACT BUY & SELL PRICES\")\n",
                "        print(\"═\" * 50)\n",
                "        \n",
                "        # Two lines as requested\n",
                "        print(f\"🟢 BUY PRICE:  ${risk_results['entry_price']:.2f} (IMMEDIATE)\")\n",
                "        print(f\"🔴 SELL PRICE: ${risk_results['stop_loss']:.2f} (STOP LOSS)\")\n",
                "        \n",
                "        print(f\"\\n📊 COMPLETE PRICE LEVELS:\")\n",
                "        print(\"─\" * 35)\n",
                "        print(f\"🛒 Entry Price:    ${risk_results['entry_price']:.2f}\")\n",
                "        print(f\"🛑 Stop Loss:      ${risk_results['stop_loss']:.2f} (-{risk_results['risk_percent']:.1f}%)\")\n",
                "        print(f\"🎯 Target 1:       ${risk_results['target_1']:.2f} (+20%)\")\n",
                "        print(f\"🎯 Target 2:       ${risk_results['target_2']:.2f} (+35%)\")\n",
                "        print(f\"🎯 Target 3:       ${risk_results['target_3']:.2f} (+50%)\")\n",
                "        print(f\"⚖️  Risk/Reward:    1:{risk_results['reward_risk_ratio']:.1f}\")\n",
                "        \n",
                "        if risk_results['risk_per_share'] > 0:\n",
                "            print(f\"\\n💼 POSITION SIZING EXAMPLE:\")\n",
                "            print(f\"   Risk per Share: ${risk_results['risk_per_share']:.2f}\")\n",
                "            print(f\"   For 1% portfolio risk:\")\n",
                "            print(f\"   • $10,000 portfolio → {(100 / risk_results['risk_per_share']):.0f} shares max\")\n",
                "            print(f\"   • $100,000 portfolio → {(1000 / risk_results['risk_per_share']):.0f} shares max\")\n",
                "    \n",
                "    def _display_recommendation(self, recommendation: Dict, symbol: str):\n",
                "        \"\"\"Display final recommendation\"\"\"\n",
                "        print(f\"\\n🎯 FINAL TRADETHRUST RECOMMENDATION\")\n",
                "        print(\"═\" * 50)\n",
                "        \n",
                "        print(f\"📊 Algorithm Results:\")\n",
                "        print(f\"   Trend Template: {'✅ PASSED' if recommendation['trend_passed'] else '❌ FAILED'}\")\n",
                "        print(f\"   VCP Pattern: {'✅ DETECTED' if recommendation['vcp_detected'] else '❌ NOT DETECTED'}\")\n",
                "        print(f\"   Breakout: {'✅ CONFIRMED' if recommendation['breakout_confirmed'] else '❌ NOT CONFIRMED'}\")\n",
                "        \n",
                "        print(f\"\\n🎯 Recommendation: {recommendation['recommendation']}\")\n",
                "        print(f\"🎬 Action: {recommendation['action']}\")\n",
                "        print(f\"🎯 Confidence: {recommendation['confidence']}\")\n",
                "        \n",
                "        print(\"═\" * 50)\n",
                "        print(f\"✅ Analysis Complete | TradeThrust Professional for Colab\")\n",
                "        print(\"⚠️  Educational purposes only - not financial advice\")\n",
                "        print(\"═\" * 50)\n",
                "    \n",
                "    def _find_contractions(self, data: pd.DataFrame) -> List[Dict]:\n",
                "        \"\"\"Find price contractions (simplified for Colab)\"\"\"\n",
                "        contractions = []\n",
                "        \n",
                "        if len(data) < 10:\n",
                "            return contractions\n",
                "        \n",
                "        # Simple swing analysis\n",
                "        for i in range(5, len(data) - 5):\n",
                "            high_window = data.iloc[i-5:i+5]['High']\n",
                "            if data.iloc[i]['High'] == high_window.max():\n",
                "                # Found a high, look for subsequent low\n",
                "                for j in range(i+1, min(i+15, len(data))):\n",
                "                    low_window = data.iloc[j-2:j+3]['Low']\n",
                "                    if data.iloc[j]['Low'] == low_window.min():\n",
                "                        # Found corresponding low\n",
                "                        contraction_pct = ((data.iloc[i]['High'] - data.iloc[j]['Low']) / data.iloc[i]['High']) * 100\n",
                "                        contractions.append({\n",
                "                            'percentage': contraction_pct,\n",
                "                            'duration': j - i\n",
                "                        })\n",
                "                        break\n",
                "        \n",
                "        return sorted(contractions, key=lambda x: x['duration'])[-3:]  # Last 3 contractions\n",
                "\n",
                "# Initialize TradeThrust\n",
                "tradethrust = TradeThrustColab()\n",
                "\n",
                "print(\"🚀 TradeThrust Complete Algorithm Loaded!\")\n",
                "print(\"✅ Ready to analyze any stock symbol\")\n",
                "print(\"📊 Use the analysis cell below to get started\")\n",
                "print(\"=\" * 60)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {"id": "analysis_header"},
            "source": [
                "---\n",
                "\n",
                "## 📊 Stock Analysis Interface\n",
                "\n",
                "**Ready to analyze stocks!** Just change the symbol below and run the cell.\n",
                "\n",
                "### 🎯 Popular symbols to try:\n",
                "- **AAPL** (Apple)\n",
                "- **GOOGL** (Google) \n",
                "- **TSLA** (Tesla)\n",
                "- **MSFT** (Microsoft)\n",
                "- **NVDA** (NVIDIA)\n",
                "- **AMZN** (Amazon)\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {"id": "analysis_cell"},
            "outputs": [],
            "source": [
                "# 🚀 TradeThrust Stock Analysis\n",
                "# Enter any stock symbol below and run this cell\n",
                "\n",
                "# 📊 ANALYZE A STOCK - Change the symbol below\n",
                "symbol = \"AAPL\"  # ← Change this to any stock symbol\n",
                "\n",
                "print(f\"🔍 Starting TradeThrust analysis for {symbol}...\")\n",
                "print(\"This may take 10-30 seconds...\")\n",
                "\n",
                "# Run the complete analysis\n",
                "result = tradethrust.analyze_stock(symbol)\n",
                "\n",
                "# 📈 Want to analyze another stock? \n",
                "# Just change the symbol above and run this cell again!"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {"id": "about_section"},
            "source": [
                "---\n",
                "\n",
                "## 🎓 About TradeThrust\n",
                "\n",
                "**TradeThrust Professional** implements a complete algorithmic trading methodology with:\n",
                "\n",
                "### ✅ **Complete Algorithm Implementation:**\n",
                "- **Trend Template Filter** (10 conditions) - Identifies strong uptrending stocks\n",
                "- **VCP Pattern Detection** (7 conditions) - Finds volatility contraction patterns\n",
                "- **Breakout Confirmation** (3 conditions) - Confirms proper breakout with volume\n",
                "- **Risk Management** - Calculates exact entry, stop loss, and profit targets\n",
                "- **Position Sizing** - Determines appropriate position size based on risk\n",
                "\n",
                "### 🎯 **Key Features:**\n",
                "- ✅ **Exact Buy/Sell Prices** - Know exactly when and where to trade\n",
                "- ✅ **Professional Analysis** - Institutional-quality stock analysis\n",
                "- ✅ **Risk Management** - Built-in position sizing and stop loss calculations\n",
                "- ✅ **Real-time Data** - Uses live market data from Yahoo Finance\n",
                "- ✅ **Educational** - Learn professional trading methodology\n",
                "\n",
                "### ⚠️ **Important Disclaimers:**\n",
                "- This tool is for **educational purposes only**\n",
                "- **Not financial advice** - always consult qualified professionals\n",
                "- **Past performance** does not guarantee future results\n",
                "- **Risk warning** - trading involves substantial risk of loss\n",
                "- Always do your own research before making investment decisions\n",
                "\n",
                "### 🚀 **Repository & Documentation:**\n",
                "- **GitHub:** [TradeThrust Repository](https://github.com/mehranpournaghshband/TradeThrust)\n",
                "- **Complete Documentation:** Available in the repository\n",
                "- **Desktop Version:** Full-featured desktop application available\n",
                "- **Web Interface:** Streamlit-based web version available\n",
                "\n",
                "---\n",
                "\n",
                "### 🎉 **Happy Trading with TradeThrust Professional!**\n",
                "\n",
                "*Remember: The best trades come to those who wait for the right setup. Use TradeThrust to find those setups with confidence!*"
            ]
        }
    ]
}

# Write the notebook to file
with open('TradeThrust_Colab_Notebook.ipynb', 'w') as f:
    json.dump(notebook, f, indent=2)

print("✅ TradeThrust Colab Notebook created successfully!")
print("📁 File: TradeThrust_Colab_Notebook.ipynb")
print("🚀 Ready to upload to GitHub and use in Google Colab!")